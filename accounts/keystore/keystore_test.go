// Modifications Copyright 2018 The klaytn Authors
// Copyright 2017 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.
//
// This file is derived from accounts/keystore/keystore_test.go (2018/06/04).
// Modified and improved for the klaytn development.

package keystore

import (
	"crypto/ecdsa"
	"github.com/klaytn/klaytn/blockchain/types"
	"github.com/klaytn/klaytn/common/hexutil"
	"github.com/klaytn/klaytn/crypto"
	"github.com/stretchr/testify/assert"
	"io/ioutil"
	"math/big"
	"math/rand"
	"os"
	"runtime"
	"sort"
	"strings"
	"testing"
	"time"

	"github.com/klaytn/klaytn/accounts"
	"github.com/klaytn/klaytn/common"
	"github.com/klaytn/klaytn/event"
)

var testSigData = make([]byte, 32)

func TestKeyStore(t *testing.T) {
	dir, ks := tmpKeyStore(t, true)
	defer os.RemoveAll(dir)

	a, err := ks.NewAccount("foo")
	if err != nil {
		t.Fatal(err)
	}
	if !strings.HasPrefix(a.URL.Path, dir) {
		t.Errorf("account file %s doesn't have dir prefix", a.URL)
	}
	stat, err := os.Stat(a.URL.Path)
	if err != nil {
		t.Fatalf("account file %s doesn't exist (%v)", a.URL, err)
	}
	if runtime.GOOS != "windows" && stat.Mode() != 0600 {
		t.Fatalf("account file has wrong mode: got %o, want %o", stat.Mode(), 0600)
	}
	if !ks.HasAddress(a.Address) {
		t.Errorf("HasAccount(%x) should've returned true", a.Address)
	}
	if err := ks.Update(a, "foo", "bar"); err != nil {
		t.Errorf("Update error: %v", err)
	}
	if err := ks.Delete(a, "bar"); err != nil {
		t.Errorf("Delete error: %v", err)
	}
	if common.FileExist(a.URL.Path) {
		t.Errorf("account file %s should be gone after Delete", a.URL)
	}
	if ks.HasAddress(a.Address) {
		t.Errorf("HasAccount(%x) should've returned true after Delete", a.Address)
	}
}

func TestSign(t *testing.T) {
	dir, ks := tmpKeyStore(t, true)
	defer os.RemoveAll(dir)

	pass := "" // not used but required by API
	a1, err := ks.NewAccount(pass)
	if err != nil {
		t.Fatal(err)
	}
	if err := ks.Unlock(a1, ""); err != nil {
		t.Fatal(err)
	}
	if _, err := ks.SignHash(accounts.Account{Address: a1.Address}, testSigData); err != nil {
		t.Fatal(err)
	}
}

func TestSignWithPassphrase(t *testing.T) {
	dir, ks := tmpKeyStore(t, true)
	defer os.RemoveAll(dir)

	pass := "passwd"
	acc, err := ks.NewAccount(pass)
	if err != nil {
		t.Fatal(err)
	}

	if _, unlocked := ks.unlocked[acc.Address]; unlocked {
		t.Fatal("expected account to be locked")
	}

	_, err = ks.SignHashWithPassphrase(acc, pass, testSigData)
	if err != nil {
		t.Fatal(err)
	}

	if _, unlocked := ks.unlocked[acc.Address]; unlocked {
		t.Fatal("expected account to be locked")
	}

	if _, err = ks.SignHashWithPassphrase(acc, "invalid passwd", testSigData); err == nil {
		t.Fatal("expected SignHashWithPassphrase to fail with invalid password")
	}
}

func TestTimedUnlock(t *testing.T) {
	dir, ks := tmpKeyStore(t, true)
	defer os.RemoveAll(dir)

	pass := "foo"
	a1, err := ks.NewAccount(pass)
	if err != nil {
		t.Fatal(err)
	}

	// Signing without passphrase fails because account is locked
	_, err = ks.SignHash(accounts.Account{Address: a1.Address}, testSigData)
	if err != ErrLocked {
		t.Fatal("Signing should've failed with ErrLocked before unlocking, got ", err)
	}

	// Signing with passphrase works
	if err = ks.TimedUnlock(a1, pass, 100*time.Millisecond); err != nil {
		t.Fatal(err)
	}

	// Signing without passphrase works because account is temp unlocked
	_, err = ks.SignHash(accounts.Account{Address: a1.Address}, testSigData)
	if err != nil {
		t.Fatal("Signing shouldn't return an error after unlocking, got ", err)
	}

	// Signing fails again after automatic locking
	time.Sleep(250 * time.Millisecond)
	_, err = ks.SignHash(accounts.Account{Address: a1.Address}, testSigData)
	if err != ErrLocked {
		t.Fatal("Signing should've failed with ErrLocked timeout expired, got ", err)
	}
}

func TestOverrideUnlock(t *testing.T) {
	dir, ks := tmpKeyStore(t, false)
	defer os.RemoveAll(dir)

	pass := "foo"
	a1, err := ks.NewAccount(pass)
	if err != nil {
		t.Fatal(err)
	}

	// Unlock indefinitely.
	if err = ks.TimedUnlock(a1, pass, 5*time.Minute); err != nil {
		t.Fatal(err)
	}

	// Signing without passphrase works because account is temp unlocked
	_, err = ks.SignHash(accounts.Account{Address: a1.Address}, testSigData)
	if err != nil {
		t.Fatal("Signing shouldn't return an error after unlocking, got ", err)
	}

	// reset unlock to a shorter period, invalidates the previous unlock
	if err = ks.TimedUnlock(a1, pass, 100*time.Millisecond); err != nil {
		t.Fatal(err)
	}

	// Signing without passphrase still works because account is temp unlocked
	_, err = ks.SignHash(accounts.Account{Address: a1.Address}, testSigData)
	if err != nil {
		t.Fatal("Signing shouldn't return an error after unlocking, got ", err)
	}

	// Signing fails again after automatic locking
	time.Sleep(250 * time.Millisecond)
	_, err = ks.SignHash(accounts.Account{Address: a1.Address}, testSigData)
	if err != ErrLocked {
		t.Fatal("Signing should've failed with ErrLocked timeout expired, got ", err)
	}
}

// This test should fail under -race if signing races the expiration goroutine.
func TestSignRace(t *testing.T) {
	dir, ks := tmpKeyStore(t, false)
	defer os.RemoveAll(dir)

	// Create a test account.
	a1, err := ks.NewAccount("")
	if err != nil {
		t.Fatal("could not create the test account", err)
	}

	if err := ks.TimedUnlock(a1, "", 15*time.Millisecond); err != nil {
		t.Fatal("could not unlock the test account", err)
	}
	end := time.Now().Add(500 * time.Millisecond)
	for time.Now().Before(end) {
		if _, err := ks.SignHash(accounts.Account{Address: a1.Address}, testSigData); err == ErrLocked {
			return
		} else if err != nil {
			t.Errorf("Sign error: %v", err)
			return
		}
		time.Sleep(1 * time.Millisecond)
	}
	t.Errorf("Account did not lock within the timeout")
}

// Tests that the wallet notifier loop starts and stops correctly based on the
// addition and removal of wallet event subscriptions.
func TestWalletNotifierLifecycle(t *testing.T) {
	// Create a temporary kesytore to test with
	dir, ks := tmpKeyStore(t, false)
	defer os.RemoveAll(dir)

	// Ensure that the notification updater is not running yet
	time.Sleep(250 * time.Millisecond)
	ks.mu.RLock()
	updating := ks.updating
	ks.mu.RUnlock()

	if updating {
		t.Errorf("wallet notifier running without subscribers")
	}
	// Subscribe to the wallet feed and ensure the updater boots up
	updates := make(chan accounts.WalletEvent)

	subs := make([]event.Subscription, 2)
	for i := 0; i < len(subs); i++ {
		// Create a new subscription
		subs[i] = ks.Subscribe(updates)

		// Ensure the notifier comes online
		time.Sleep(250 * time.Millisecond)
		ks.mu.RLock()
		updating = ks.updating
		ks.mu.RUnlock()

		if !updating {
			t.Errorf("sub %d: wallet notifier not running after subscription", i)
		}
	}
	// Unsubscribe and ensure the updater terminates eventually
	for i := 0; i < len(subs); i++ {
		// Close an existing subscription
		subs[i].Unsubscribe()

		// Ensure the notifier shuts down at and only at the last close
		for k := 0; k < int(walletRefreshCycle/(250*time.Millisecond))+2; k++ {
			ks.mu.RLock()
			updating = ks.updating
			ks.mu.RUnlock()

			if i < len(subs)-1 && !updating {
				t.Fatalf("sub %d: event notifier stopped prematurely", i)
			}
			if i == len(subs)-1 && !updating {
				return
			}
			time.Sleep(250 * time.Millisecond)
		}
	}
	t.Errorf("wallet notifier didn't terminate after unsubscribe")
}

type walletEvent struct {
	accounts.WalletEvent
	a accounts.Account
}

// Tests that wallet notifications and correctly fired when accounts are added
// or deleted from the keystore.
func TestWalletNotifications(t *testing.T) {
	dir, ks := tmpKeyStore(t, false)
	defer os.RemoveAll(dir)

	// Subscribe to the wallet feed and collect events.
	var (
		events  []walletEvent
		updates = make(chan accounts.WalletEvent)
		sub     = ks.Subscribe(updates)
	)
	defer sub.Unsubscribe()
	go func() {
		for {
			select {
			case ev := <-updates:
				events = append(events, walletEvent{ev, ev.Wallet.Accounts()[0]})
			case <-sub.Err():
				close(updates)
				return
			}
		}
	}()

	// Randomly add and remove accounts.
	var (
		live       = make(map[common.Address]accounts.Account)
		wantEvents []walletEvent
	)
	for i := 0; i < 1024; i++ {
		if create := len(live) == 0 || rand.Int()%4 > 0; create {
			// Add a new account and ensure wallet notifications arrives
			account, err := ks.NewAccount("")
			if err != nil {
				t.Fatalf("failed to create test account: %v", err)
			}
			live[account.Address] = account
			wantEvents = append(wantEvents, walletEvent{accounts.WalletEvent{Kind: accounts.WalletArrived}, account})
		} else {
			// Delete a random account.
			var account accounts.Account
			for _, a := range live {
				account = a
				break
			}
			if err := ks.Delete(account, ""); err != nil {
				t.Fatalf("failed to delete test account: %v", err)
			}
			delete(live, account.Address)
			wantEvents = append(wantEvents, walletEvent{accounts.WalletEvent{Kind: accounts.WalletDropped}, account})
		}
	}

	// Shut down the event collector and check events.
	sub.Unsubscribe()
	<-updates
	checkAccounts(t, live, ks.Wallets())
	checkEvents(t, wantEvents, events)
}

// checkAccounts checks that all known live accounts are present in the wallet list.
func checkAccounts(t *testing.T, live map[common.Address]accounts.Account, wallets []accounts.Wallet) {
	if len(live) != len(wallets) {
		t.Errorf("wallet list doesn't match required accounts: have %d, want %d", len(wallets), len(live))
		return
	}
	liveList := make([]accounts.Account, 0, len(live))
	for _, account := range live {
		liveList = append(liveList, account)
	}
	sort.Sort(accountsByURL(liveList))
	for j, wallet := range wallets {
		if accs := wallet.Accounts(); len(accs) != 1 {
			t.Errorf("wallet %d: contains invalid number of accounts: have %d, want 1", j, len(accs))
		} else if accs[0] != liveList[j] {
			t.Errorf("wallet %d: account mismatch: have %v, want %v", j, accs[0], liveList[j])
		}
	}
}

// checkEvents checks that all events in 'want' are present in 'have'. Events may be present multiple times.
func checkEvents(t *testing.T, want []walletEvent, have []walletEvent) {
	for _, wantEv := range want {
		nmatch := 0
		for ; len(have) > 0; nmatch++ {
			if have[0].Kind != wantEv.Kind || have[0].a != wantEv.a {
				break
			}
			have = have[1:]
		}
		if nmatch == 0 {
			t.Fatalf("can't find event with Kind=%v for %x", wantEv.Kind, wantEv.a.Address)
		}
	}
}

func tmpKeyStore(t *testing.T, encrypted bool) (string, *KeyStore) {
	d, err := ioutil.TempDir("", "klay-keystore-test")
	if err != nil {
		t.Fatal(err)
	}
	new := NewPlaintextKeyStore
	if encrypted {
		new = func(kd string) *KeyStore { return NewKeyStore(kd, veryLightScryptN, veryLightScryptP) }
	}
	return d, new(string(d))
}

// testTxs returns sample transactions and private keys of the sender and fee payer.
func testTxs() (*ecdsa.PrivateKey, *ecdsa.PrivateKey, map[types.TxType]string) {
	// all test txs have the same sender address derived from the following private key
	senderPrvKey, _ := crypto.HexToECDSA("95a21e86efa290d6665a9dbce06ae56319335540d13540fb1b01e28a5b2c8460")

	// all test fee-delegation txs have the same fee payer address derived from the following private key
	feePayerPrvKey, _ := crypto.HexToECDSA("f45a87856d14357609ce6b99645a1a7889deafbf00848bbdace60d8cd10466fa")

	// Sample transactions for the test. Each tx is represented as a JSON marshalled byte array.
	txs := map[types.TxType]string{
		types.TxTypeLegacyTransaction:                           "0x7b226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c22746f223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2276616c7565223a22307831222c22696e707574223a223078222c227369676e617475726573223a5b7b2256223a2230783235222c2252223a223078666666666635643530386235396636343337333335396137316364613661356362613639373833326538353033393035333363303463303534353632363466222c2253223a22307834313935313931366366363739653131356136366532613130616365363530363166333836663937396437613038616264333866393265333336303437353361227d5d2c2268617368223a22307838666434393838393364383031376437316635643237313432653436316636303365366538393861613432376338613736316236623539323734346361343861227d",
		types.TxTypeValueTransfer:                               "0x7b2274797065496e74223a382c2274797065223a2254785479706556616c75655472616e73666572222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c22746f223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2276616c7565223a22307831222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c227369676e617475726573223a5b7b2256223a2230783235222c2252223a22307834313039633339393763373438626461633865373937383861383362336463663034396361333963656163346337653364633537366638386536356630356364222c2253223a22307837613433356664666236643739636234386132666566313131313138313163393338333138663532386435623435366138353163383138316163653231363965227d5d2c2268617368223a22307833393936646361633164373132656335326262396336626139646430636332633630643836623733363866623733323931333737626261343666633631646464227d",
		types.TxTypeFeeDelegatedValueTransfer:                   "0x7b2274797065496e74223a392c2274797065223a2254785479706546656544656c65676174656456616c75655472616e73666572222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c22746f223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2276616c7565223a22307831222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307861396435633333633835396334346138616438376235353163326161643164366135366566363065303762633930653530633430643266363839306232363232222c2253223a223078353634663662653435333461613035373138643135366337353566663435633139393033626136663830343530363139336165376539613532353831663933227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783236222c2252223a22307865313138376662313337653139626661353265653162306534313037313064386561346463303566306231363430393933363862643832313836326534663134222c2253223a223078653466366462613738366234623639373738323163333330313164346430636236356362393232633863613438343761343336666234313537363566353239227d5d2c2268617368223a22307866633866326461613961336432636135373530643761343565643934373737393032363261653466336564623535333466383738366164383637376162386262227d",
		types.TxTypeFeeDelegatedValueTransferWithRatio:          "0x7b2274797065496e74223a31302c2274797065223a2254785479706546656544656c65676174656456616c75655472616e7366657257697468526174696f222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c22746f223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2276616c7565223a22307831222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22666565526174696f223a2230783165222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307863363431373766386432396535393330333930653239643632633733633764363365636636326137623033343439396466363834393332646462636366643238222c2253223a22307833663666396237313166303330623634636161313730613834653839363734313263343834316632353161306566623361663563303062636462333237333837227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783235222c2252223a22307833363834383364666537393338663133323966343865313736396539333965313933346234333732356630393431343130653534333233636139636431386337222c2253223a22307835626336326366626262356265303964376530646564373733623264343734376634636635636437646137633933303536633934383839393965356535336435227d5d2c2268617368223a22307837366566333639353430373531363936336234316338623131376262386262616262316663626631663539633033393361303838326632396136303234353163227d",
		types.TxTypeValueTransferMemo:                           "0x7b2274797065496e74223a31362c2274797065223a2254785479706556616c75655472616e736665724d656d6f222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c22746f223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2276616c7565223a22307831222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223a22307836383635366336633666222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307862326430386566366165313266313163653333383033333635666563323433666434643861646432313234393530353438333964383461303930623665326330222c2253223a22307831653333363363656431303331386263393633653063326565346133663664323237626261393830626432333561383236366365653430633161303632643065227d5d2c2268617368223a22307862326162663736386337626239396632356331636633666265626130653365646337653730366536643231626636316139396665326434336630313632623034227d",
		types.TxTypeFeeDelegatedValueTransferMemo:               "0x7b2274797065496e74223a31372c2274797065223a2254785479706546656544656c65676174656456616c75655472616e736665724d656d6f222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c22746f223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2276616c7565223a22307831222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223a22307836383635366336633666222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307865653535363731306634326338326134663265383465346565343737363162636335643434636265343231636464343034616230313162303837393164336361222c2253223a22307833386435636461373864653930663138643364303462383939383937363435343432623764613731373539613935633262613636363936643738316464313862227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783235222c2252223a22307863383434336535646535623030633035636531613934323339343139616338636638666438393363353531393161313332373230373534353832353138643034222c2253223a22307837313765396532666161373532653464336436376632326461346164306139393634366136336638353665666533376537326638646537366132393637663961227d5d2c2268617368223a22307839623463616461316136303061633531636530306261393834306539366530653536386466393635323430643964336238336434623038653335326565386336227d",
		types.TxTypeFeeDelegatedValueTransferMemoWithRatio:      "0x7b2274797065496e74223a31382c2274797065223a2254785479706546656544656c65676174656456616c75655472616e736665724d656d6f57697468526174696f222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c22746f223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2276616c7565223a22307831222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223a22307836383635366336633666222c22666565526174696f223a2230783165222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307864666134326434323566613031396661343038656265656136396530326264643461346435323835643764653063653333383461303839666564383430623531222c2253223a22307837643231323937396266366230383261356464613062333062333039313963306137653934636633303537656165653339313638333431376363653435623230227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783236222c2252223a22307832356139313137366164313763636333396433376363353638363831376164633330343264626532396437336533313536653433363865626335633639366365222c2253223a22307835383363343530626361316664303737306435323364393531653034613633663764336431323861366166643633346362376437353565326137373530623032227d5d2c2268617368223a22307836393032386236616137326530613930623765386232336663663933653537636431336631623661343637643834366266623134353933393065343735666537227d",
		types.TxTypeAccountUpdate:                               "0x7b2274797065496e74223a33322c2274797065223a225478547970654163636f756e74557064617465222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c226b6579223a22307830316330222c227369676e617475726573223a5b7b2256223a2230783235222c2252223a22307866316530383061636137643761623737353536626238636238316233616230366238613530376435336565643962663734636162636636353333626430663436222c2253223a223078393032626334353763643335303033633439343337323934326461636330623466386461643366653333353564653233626332343934366662663433636536227d5d2c2268617368223a22307836373237646232636435613464623364646538666432616632313266613830613532376230346263646432373033376539363636323939353937643835303939227d",
		types.TxTypeFeeDelegatedAccountUpdate:                   "0x7b2274797065496e74223a33332c2274797065223a2254785479706546656544656c6567617465644163636f756e74557064617465222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c226b6579223a22307830316330222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307833306465396438336665336639323764383062666433613039346262613436383030323335356436613563376265396466666539333363356232303865383832222c2253223a22307835346262353066323765373362323764333664316161656131306539383438306332626534393730633930663634303863646535626538646637663866336530227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783236222c2252223a22307862633666666431306532343465383835323832366435363039353163303664373735373736393135386332633431393161636564636332613231393336396564222c2253223a22307835363961313034636438323765336132356263356466313239343961353366363430333639643437623737636463336361383038336162346364393662363065227d5d2c2268617368223a22307862393734636533323235336664346363646439663031643864316430623665396663626337666634346161613464393632353438373062383631366632643865227d",
		types.TxTypeFeeDelegatedAccountUpdateWithRatio:          "0x7b2274797065496e74223a33342c2274797065223a2254785479706546656544656c6567617465644163636f756e7455706461746557697468526174696f222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c226b6579223a22307830316330222c22666565526174696f223a2230783165222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307837366132613262643762363934643135323837633337386431623237383564623563336435386233383932303766343339323562313266343332386264363132222c2253223a22307836396262363931363335646531623531636361303037616633323336336437333134326430343330373638643833666138636234383438383061656663323036227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783236222c2252223a22307834346462303534363739386333666431303737313663333438666632336137653830386237653132633731653064383339386539376239663133643234313263222c2253223a22307832613062343431363731373035336332626139653737346164396666643735353134333965656632336332613434306133363133323235326163646437326535227d5d2c2268617368223a22307830613933383237616435656162383536326461663839376137646162306264333031613339303839636430333738333765343861343631633666323233313338227d",
		types.TxTypeSmartContractDeploy:                         "0x7b2274797065496e74223a34302c2274797065223a22547854797065536d617274436f6e74726163744465706c6f79222c226e6f6e6365223a22307830222c226761735072696365223a22307830222c22676173223a223078393839363830222c22746f223a6e756c6c2c2276616c7565223a22307830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223ac2268756d616e5265616461626c65223a66616c73652c22636f6465466f726d6174223a22307830222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307863336631336139333661356364326436363334343035303333613462383766363838313034363964613762343432643134653637313566323237356235623161222c2253223a22307834393465633339653366626635333732666664346462353065613631646165623761626237616432386361383139633539323731326234323236656430666235227d5d2c2268617368223a22307866393736656663306662333662313837636335303462313233316136373362326434643563356631613631613331386562343539663163366463313332373335227d",
		types.TxTypeFeeDelegatedSmartContractDeploy:             "0x7b2274797065496e74223a34312c2274797065223a2254785479706546656544656c656761746564536d617274436f6e74726163744465706c6f79222c226e6f6e6365223a22307830222c226761735072696365223a22307830222c22676173223a223078393839363830222c22746f223a6e756c6c2c2276616c7565223a22307830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223ac2268756d616e5265616461626c65223a66616c73652c22636f6465466f726d6174223a22307830222c227369676e617475726573223a5b7b2256223a2230783235222c2252223a22307862636532303864626138646465343032333439343231386530643831363031623866303163633130303761336631643230643730353763653965653661356563222c2253223a22307836613934376135313763663163303534336539306439313633303362623037356438363665373463643665646638666265363166636166616361643039303365227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783236222c2252223a22307861666566666163613937366539363138393363343134343237303536366637656361353633633961663431663036633037333661636633333536393132326632222c2253223a22307831656236643366346438306566613562316362383431336430373435313966363839373231626662633030646639333332376138366565356465326565356666227d5d2c2268617368223a22307831633839386663303333393962303231623539343530613266346662356463666635313635626161666465653436643664376537613139623962626532656561227d",
		types.TxTypeFeeDelegatedSmartContractDeployWithRatio:    "0x7b2274797065496e74223a34322c2274797065223a2254785479706546656544656c656761746564536d617274436f6e74726163744465706c6f7957697468526174696f222c226e6f6e6365223a22307830222c226761735072696365223a22307830222c22676173223a223078393839363830222c22746f223a6e756c6c2c2276616c7565223a22307830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223ac2268756d616e5265616461626c65223a66616c73652c22666565526174696f223a2230783165222c22636f6465466f726d6174223a22307830222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307839393430656465313062336238343164376261613462346565653532393632646462343862316132333864383762396236666238643339613139343437616263222c2253223a22307832633964353761303165336330636465316539636162626663346264326265313862313632383830653266396464323566653166356632303030353963623564227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783235222c2252223a22307833643938353764323934383932373366313164373036656232386431326465323235363063376563303930356562343463376136643037666166373763376136222c2253223a22307837633730373166326466313135386230316366346261383736653937383134613062363265663863313030623235646562643564366432643139366363396531227d5d2c2268617368223a22307839643862386235333536326165646430323864653739383938366435383336346632356135376631616230633931663263616136346362356562623262366633227d",
		types.TxTypeSmartContractExecution:                      "0x7b2274797065496e74223a34382c2274797065223a22547854797065536d617274436f6e7472616374457865637574696f6e222c226e6f6e6365223a22307830222c226761735072696365223a22307830222c22676173223a223078393839363830222c22746f223a22307839303063313465303232333039653631616537613263626664633764626336313030643237353039222c2276616c7565223a22307830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223a223078363335333538366230303030303030303030303030303030303030303030303066396661643065393462323136666166666665666239396566303263653434663939346133646538222c227369676e617475726573223a5b7b2256223a2230783235222c2252223a22307836396637393036306664366338343735326338343639623933653664356162373237366331636663306536636235666535636164323439393139366630653430222c2253223a22307835396666306433336134316630333035363863613363643961346431316637386437623439623966313464633061356430373331313262326666383637623938227d5d2c2268617368223a22307865353266313431313738303665653966316236643831333538636661323861316261323939336236366239623232613538336530326533316137393438643465227d",
		types.TxTypeFeeDelegatedSmartContractExecution:          "0x7b2274797065496e74223a34392c2274797065223a2254785479706546656544656c656761746564536d617274436f6e7472616374457865637574696f6e222c226e6f6e6365223a22307830222c226761735072696365223a22307830222c22676173223a223078393839363830222c22746f223a22307839303063313465303232333039653631616537613263626664633764626336313030643237353039222c2276616c7565223a22307830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223a223078363335333538366230303030303030303030303030303030303030303030303066396661643065393462323136666166666665666239396566303263653434663939346133646538222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307839663165353032373430326332663530393861333963333734633039663236303966663265376436653434366166343930383931343731346530326535383336222c2253223a223078383136626136633836326535636166643061373335336530613135343363633931356132336161343162303765623633376432383436613639313837343734227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783236222c2252223a22307861313330633063336130376239353864343362393836373363616566303431626334353633373936393735306332306636323763666238636138383131386263222c2253223a22307836666436326238343233363430633633366330323733316464363532633763343963346262616337646231326333316532613739636630373361396230623137227d5d2c2268617368223a22307862666639393637636134333463396336633539336337323563383233353138646236326538333131313437613233663935633937333935663162326130653537227d",
		types.TxTypeFeeDelegatedSmartContractExecutionWithRatio: "0x7b2274797065496e74223a35302c2274797065223a2254785479706546656544656c656761746564536d617274436f6e7472616374457865637574696f6e57697468526174696f222c226e6f6e6365223a22307830222c226761735072696365223a22307830222c22676173223a223078393839363830222c22746f223a22307839303063313465303232333039653631616537613263626664633764626336313030643237353039222c2276616c7565223a22307830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223a223078363335333538366230303030303030303030303030303030303030303030303066396661643065393462323136666166666665666239396566303263653434663939346133646538222c22666565526174696f223a2230783165222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307861326635313137383437353363356464333761313331313531346537353832623237666534303931633862373431363038623830646239303938373861343263222c2253223a223078393261633666616532643237323565383337333831313139343065643738623338333730663632643965373934613936626236333731616434366231633433227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783235222c2252223a22307836633030393530373939656461623433646432663663393933373064326431383932633963643462383163633138346630373034306565353432633638336432222c2253223a22307832396636666436663033353566663638313134326535643333313663396430336563393032306634396362306239323733396364346661646261343766363335227d5d2c2268617368223a22307835626366616330633064646537383464333032356435613464303432343062633663393635323831613839636135376263616232323537323739356164383336227d",
		types.TxTypeCancel:                                      "0x7b2274797065496e74223a35362c2274797065223a2254785479706543616e63656c222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c227369676e617475726573223a5b7b2256223a2230783235222c2252223a22307865653636336530623364333431663164363631386436313439653162626663663964666430326239663130353862653465636161363064393634663832636438222c2253223a22307833626538366233636232306363633733366566366261653835333936653835396539653161396262346231313730336430633434393863353766653566396330227d5d2c2268617368223a22307832303136633231313031643731666434346565623861636135323763363734613135363037613430663763663434373463333866626538616633383766643931227d",
		types.TxTypeFeeDelegatedCancel:                          "0x7b2274797065496e74223a35372c2274797065223a2254785479706546656544656c65676174656443616e63656c222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307866383461363365346461386164633834623536623036353333353439353965366636386531356234326463336432326233373861353739376462656631656437222c2253223a22307834303566313865663138653566663465303931336466343930346634373137383864353764356435623566633866303133366131636633346539633433626535227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783235222c2252223a22307838376465663961326564353766363536303534626162363030313666663066323466623633306138646531316164333833343165313466306263383564373139222c2253223a22307835346634613334653235396133376462666265643835393166643133626439323030393536333332613132666338393437653233326563376331393861396532227d5d2c2268617368223a22307862623838393230363434303334613831616566316536366262636230376464343536636530653762653861623835616135303565343430353961363665613235227d",
		types.TxTypeFeeDelegatedCancelWithRatio:                 "0x7b2274797065496e74223a35382c2274797065223a2254785479706546656544656c65676174656443616e63656c57697468526174696f222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22666565526174696f223a2230783165222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307863643865373930646431393936343334666163666533373537666137656637653363356235346236653837396463633465363365396564353662653363363762222c2253223a22307833666265613039343839623139626465376465623430613966613365633162353532373766643065323231393733653934393736333135316361323864663162227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783236222c2252223a22307838656261333130356530636535643738336165666661313238633561396531646364343962366261316136336561366338356336626563353163373762623231222c2253223a22307832366139303333373264643538383666633232636134376566623461316663303264626439323165663130633866353739376463353062633938373439393730227d5d2c2268617368223a22307865653763326561373038373661326232373265623730323537663762646136306335366664373735663866316232653638396233343237356663373038346333227d",
		types.TxTypeChainDataAnchoring:                          "0x7b2274797065496e74223a37322c2274797065223a22547854797065436861696e44617461416e63686f72696e67222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223a22307831313232222c227369676e617475726573223a5b7b2256223a2230783236222c2252223a22307834393032366534336165313338303962373539363234303633373364343633613030653961633263656163336465323738316133633930646434623834326665222c2253223a22307836373935643536343161656162313735363333343030663438306233316662656663313538376563366566633137386530396566363432373464653461663538227d5d2c2268617368223a22307838366232643537333663623163303963356237383663333964623933336539646637653663666563626638353039393133316336663963363733383863313263227d",
		types.TxTypeFeeDelegatedChainDataAnchoring:              "0x7b2274797065496e74223a37332c2274797065223a2254785479706546656544656c656761746564436861696e44617461416e63686f72696e67222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223a22307831313232222c227369676e617475726573223a5b7b2256223a2230783235222c2252223a22307831663434633464386663333539313832616532356661343231343331666130313730646134353065633063333836346136333365366133613731356530393164222c2253223a22307835646335623566366265373538653534616137623865326435633336386264386637363939303531313032316436626134333866376437656138616666646433227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783235222c2252223a22307831333864316533656361623936336266303334303361323636633132343461356234643466616435366130633332633333306538346661346238373838656635222c2253223a22307833386462636264326661383734316130653939373536633032666530393766363662363833383361303235613331653837306466623237623533393130323432227d5d2c2268617368223a22307865313466353931323765333666333938636134616230353733643435343738336263386337646432386532346530353762623536346133353866303363353530227d",
		types.TxTypeFeeDelegatedChainDataAnchoringWithRatio:     "0x7b2274797065496e74223a37342c2274797065223a2254785479706546656544656c656761746564436861696e44617461416e63686f72696e6757697468526174696f222c226e6f6e6365223a22307830222c226761735072696365223a223078356432316462613030222c22676173223a223078393839363830222c2266726f6d223a22307861376562363939326335666435356634333330356232346565363731353062663439313064333239222c22696e707574223a22307831313232222c22666565526174696f223a2230783165222c227369676e617475726573223a5b7b2256223a2230783235222c2252223a22307833383831646366656132363364363836343264373838363366316562356566343238333939633763633862623834303630373239656561646565376134336561222c2253223a22307833333534313235343032373234383762643166656336373336383536663165666164353630653135646461663837373863323538326262336366366461633532227d5d2c226665655061796572223a22307866396661643065393462323136666166666665666239396566303263653434663939346133646538222c2266656550617965725369676e617475726573223a5b7b2256223a2230783236222c2252223a223078613933663161626464636564303234323836656563616632316361646537323333303532613039333766363939366135633562376164313662393365666665222c2253223a22307835353963633263353262336565643130333363306462626664353038643533303763306264613831366462636537653938623565303364653732306565376566227d5d2c2268617368223a22307837626636393662323732353765666631376235663065363534633433376265373735623530343034303031666162363534663133396361333336363733616263227d",
	}

	return senderPrvKey, feePayerPrvKey, txs
}

// TestKeyStore_SignTx tests the tx signing function of KeyStore.
func TestKeyStore_SignTx(t *testing.T) {
	chainID := big.NewInt(1)

	// Test for all possible tx types
	txTypes := []types.TxType{}
	for i := types.TxTypeLegacyTransaction; i < types.TxTypeLast; i++ {
		_, err := types.NewTxInternalData(i)
		if err == nil {
			txTypes = append(txTypes, i)
		}
	}

	// temp keystore
	dir, ks := tmpKeyStore(t, true)
	defer os.RemoveAll(dir)

	// test transactions and the private key of the sender
	senderPrvKey, _, txs := testTxs()

	// generate an account used for the test
	password := ""
	acc, err := ks.ImportECDSA(senderPrvKey, password)
	if err != nil {
		t.Fatal(err)
	}

	// unlock the sender account to sign
	if err := ks.Unlock(acc, ""); err != nil {
		t.Fatal(err)
	}

	// signing test for each tx types
	for _, txType := range txTypes {
		tx := &types.Transaction{}

		// get a test tx string and covert it
		testTx := txs[txType]
		decodedTestTx, err := hexutil.Decode(testTx)
		if err != nil {
			t.Fatal("Failed to decode a tx")
		}

		if err := tx.UnmarshalJSON(decodedTestTx); err != nil {
			t.Fatal("Failed to unmarshall a tx")
		}

		// (hardcoded) original signature of the tx
		expectedSig := tx.RawSignatureValues()

		// re-sign the tx to check the validity of `ks.SignTx` function
		tx, err = ks.SignTx(accounts.Account{Address: acc.Address}, tx, chainID)
		if err != nil {
			t.Fatal(err)
		}

		// get the new tx signature and check the value
		sig := tx.RawSignatureValues()
		assert.Equal(t, expectedSig, sig)
	}
}

// TestKeyStore_SignTxAsFeePayer tests the fee payer's tx signing function of KeyStore.
func TestKeyStore_SignTxAsFeePayer(t *testing.T) {
	chainID := big.NewInt(1)

	// This test is only for the fee-delegation type
	txTypes := []types.TxType{}
	for i := types.TxTypeLegacyTransaction; i < types.TxTypeLast; i++ {
		_, err := types.NewTxInternalData(i)
		if err == nil && i.IsFeeDelegatedTransaction() {
			txTypes = append(txTypes, i)
		}
	}

	// temp keystore
	dir, ks := tmpKeyStore(t, true)
	defer os.RemoveAll(dir)

	// test transactions and the private key of the fee payer
	_, feePayerPrvKey, txs := testTxs()

	// generate an account used for the test
	password := ""
	acc, err := ks.ImportECDSA(feePayerPrvKey, password)
	if err != nil {
		t.Fatal(err)
	}

	// unlock the fee payer account to sign
	if err := ks.Unlock(acc, ""); err != nil {
		t.Fatal(err)
	}

	// signing test for each fee-delegation tx types
	for _, txType := range txTypes {
		tx := &types.Transaction{}

		// get a test tx string and covert it
		testTx := txs[txType]
		decodedTestTx, err := hexutil.Decode(testTx)
		if err != nil {
			t.Fatal("Failed to decode a tx")
		}

		if err := tx.UnmarshalJSON(decodedTestTx); err != nil {
			t.Fatal("Failed to unmarshall a tx")
		}

		// (hardcoded) original fee payer's signature of the tx
		expectedSig, err := tx.GetFeePayerSignatures()
		if err != nil {
			t.Fatal(err)
		}

		// re-sign the tx as a fee payer to check the validity of `ks.SignTxAsFeePayer` function
		tx, err = ks.SignTxAsFeePayer(accounts.Account{Address: acc.Address}, tx, chainID)
		if err != nil {
			t.Fatal(err)
		}

		// get the new fee payer's signature and check the value
		sig, err := tx.GetFeePayerSignatures()
		if err != nil {
			t.Fatal(err)
		}
		assert.Equal(t, expectedSig, sig)
	}
}
