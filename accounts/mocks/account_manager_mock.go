// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/klaytn/klaytn/accounts (interfaces: AccountManager)

// Package mock_accounts is a generated GoMock package.
package mock_accounts

import (
	gomock "github.com/golang/mock/gomock"
	accounts "github.com/klaytn/klaytn/accounts"
	event "github.com/klaytn/klaytn/event"
	reflect "reflect"
)

// MockAccountManager is a mock of AccountManager interface
type MockAccountManager struct {
	ctrl     *gomock.Controller
	recorder *MockAccountManagerMockRecorder
}

// MockAccountManagerMockRecorder is the mock recorder for MockAccountManager
type MockAccountManagerMockRecorder struct {
	mock *MockAccountManager
}

// NewMockAccountManager creates a new mock instance
func NewMockAccountManager(ctrl *gomock.Controller) *MockAccountManager {
	mock := &MockAccountManager{ctrl: ctrl}
	mock.recorder = &MockAccountManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountManager) EXPECT() *MockAccountManagerMockRecorder {
	return m.recorder
}

// Backends mocks base method
func (m *MockAccountManager) Backends(arg0 reflect.Type) []accounts.Backend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backends", arg0)
	ret0, _ := ret[0].([]accounts.Backend)
	return ret0
}

// Backends indicates an expected call of Backends
func (mr *MockAccountManagerMockRecorder) Backends(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backends", reflect.TypeOf((*MockAccountManager)(nil).Backends), arg0)
}

// Find mocks base method
func (m *MockAccountManager) Find(arg0 accounts.Account) (accounts.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(accounts.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockAccountManagerMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAccountManager)(nil).Find), arg0)
}

// Subscribe mocks base method
func (m *MockAccountManager) Subscribe(arg0 chan<- accounts.WalletEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockAccountManagerMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockAccountManager)(nil).Subscribe), arg0)
}

// Wallet mocks base method
func (m *MockAccountManager) Wallet(arg0 string) (accounts.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallet", arg0)
	ret0, _ := ret[0].(accounts.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wallet indicates an expected call of Wallet
func (mr *MockAccountManagerMockRecorder) Wallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallet", reflect.TypeOf((*MockAccountManager)(nil).Wallet), arg0)
}

// Wallets mocks base method
func (m *MockAccountManager) Wallets() []accounts.Wallet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallets")
	ret0, _ := ret[0].([]accounts.Wallet)
	return ret0
}

// Wallets indicates an expected call of Wallets
func (mr *MockAccountManagerMockRecorder) Wallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallets", reflect.TypeOf((*MockAccountManager)(nil).Wallets))
}
